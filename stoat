#!/usr/bin/ruby
require 'optparse'
require 'ostruct'
require 'set'
require 'yaml'
require 'pp'

#Modifies mapa s.t. it includes the mapb info
def merge_maps(mapa, mapb)
    if mapb
        mapb.each do |key, val|
            if(mapa.has_key?(key) && mapa[key].is_a?(Array))
                mapa[key].concat val
            else
                mapa[key] = val
            end
        end
    end
end

CurrentDir = File.dirname(__FILE__)

options = OpenStruct.new
options.whitelist = [CurrentDir+"/data/whitelist.txt", CurrentDir+"/../share/stoat/whitelist.txt"]
options.blacklist = [CurrentDir+"/data/blacklist.txt", CurrentDir+"../share/stoat/blacklist.txt"]
options.unmangled = OpenStruct.new
options.unmangled.whitelist = []
options.unmangled.blacklist = []
options.root = "./"
options.lib  = "libstoat.so"
options.dir  = []
options.recursive = false

OptionParser.new do |opts|
      opts.banner = "Usage: example.rb [options] FILES"

      opts.on("-w", "--whitelist FILE",
              "Define a Whitelist File") do |list|
          options.whitelist << list
      end

      opts.on("-b", "--blacklist FILE",
              "Define a Blacklist File") do |list|
          options.blacklist << list
      end

      opts.on("-r", "--recursive DIR",
              "Enable Recursive Search Mode") do |dir|
          options.recursive = true
          options.root = dir
      end

      opts.on("-l", "--llvm-passes LIB",
              "The Library Containing The Needed LLVM Passes") do |lib|
          options.lib = lib
      end
end.parse!

#White List/Black List Expansion
white_list = []
tmp = 0
options.whitelist.each do |x|
    begin
        tmp = tmp + 1
        white_list.concat File.read(x).split
    rescue Errno::ENOENT => err
        if(tmp > 2) #Non default
            $stderr.puts("Unknown whitelist file #{x}")
        end
    end
end

black_list = []
tmp = 0
options.blacklist.each do |x|
    begin
        tmp = tmp + 1
        black_list.concat File.read(x).split
    rescue Errno::ENOENT => err
        if(tmp > 2) #Non default
            $stderr.puts "Unknown blacklist file #{x}"
        end
    end
end

#If there are unmangled files, then mangle them and add them to the end of the
#mangled lists

#For each one of the bitcode files, run the pass based preprocessor
files = []
if(!ARGV.empty?)
    files.concat ARGV
end
if(options.recursive)
    rfiles = []
    rfiles.concat `find #{options.root} -type f | grep -e "\\.bc$"`.split
    rfiles.concat `find #{options.root} -type f | grep -e "\\.o$"`.split

    rfiles.each do |f|
        if(/LLVM/.match `file #{f}`)
            files << f
        end
    end
end

if(files.empty?)
    puts "There Are No Files To Process"
    exit 1
end

#p files
callgraph = Hash.new
function_props = Hash.new
class_high = Hash.new
vtable_information = Hash.new

files.each do |f|
    p "running #{f} file..."
    `opt -load #{options.lib} --extract-callgraph < #{f} > /dev/null 2> sfpv_output.txt`
    #puts File.read("sfpv_output.txt")
    ncallgraph = YAML.load_file "sfpv_output.txt"


    `opt -load #{options.lib} --extract-annotations < #{f} > /dev/null 2> sfpv_output.txt`
    #puts File.read("sfpv_output.txt")
    nfunc = YAML.load_file "sfpv_output.txt"

    `opt -load #{options.lib} --extract-class-hierarchy < #{f} > /dev/null 2> sfpv_output.txt`
    class_nhigh = YAML.load_file "sfpv_output.txt"

    `opt -load #{options.lib} --extract-vtables < #{f} > /dev/null 2> sfpv_output.txt`
    vtable_ninformation = YAML.load_file "sfpv_output.txt"

    merge_maps(callgraph, ncallgraph)
    merge_maps(function_props, nfunc)
    merge_maps(class_high, class_nhigh)
    merge_maps(vtable_information, vtable_ninformation)
end

symbol_list = Set.new
callgraph.each do |key,val|
    symbol_list << key
    val.each do |x|
        symbol_list << x
    end
    val = val.uniq
end

puts "Demangling #{symbol_list.length} Symbols..."
demangled_symbols = Hash.new
demangled_short   = Hash.new

def shorten_symbol(sym_)
    paren = 0
    finished = false

    sym = ""
    sym_.reverse.each_char do |x|
        if finished
            sym << x
        end
        if x == ')'
            paren = paren + 1
        end

        if(x == '(' && paren == 1)
            finished = 1
        elsif(x == '(')
            paren = paren - 1
        end
    end
    sym.reverse
end

def demangle(symbol_list, demangled_symbols, demangled_short)
    puts "Demangling #{symbol_list.length} Symbols..."
    f = File.new("tmp_thing.txt", "w")
    f.write(symbol_list.to_a.join("\n"))
    f.close
    demangled_list = `cat tmp_thing.txt | c++filt`.split("\n")
    puts "Resulting in #{demangled_list.length} Items..."
    tmp = 0
    symbol_list.each do |x|
        demangled_symbols[x] = demangled_list[tmp]
        tmp = tmp + 1
    end

    demangled_symbols.each do |key, value|
        m = shorten_symbol(value)
        if(m.empty?)
            demangled_short[key] = value
        else
            demangled_short[key] = m
        end
    end
end
demangle(symbol_list, demangled_symbols, demangled_short)

#pp demangled_short


reason_user_w  = "The Function Was Declared Realtime By A Whitelist"
reason_user_b  = "The Function Was Declared NonRealtime By A Blacklist"
reason_code_w  = "The Function Was Declared Realtime By A Code Annotation"
reason_code_b  = "The Function Was Declared NonRealtime By A Code Annotation"
reason_deduced = "The Function Was Deduced To Need To Be RealTime As It Was Called By A Realtime Function"
reason_none    = "Nom Deduction has occured"
reason_nocode  = "No Code Or Annotations, So The Function is Assumed Unsafe"

class DeductionChain
    attr_accessor :deduction_source, :reason, :realtime_p, :non_realtime_p, :has_body_p, :contradicted_p, :contradicted_by


    def initialize
        @deduction_source = nil
        @reason           = "No Deduction has occured"
        @realtime_p       = false
        @non_realtime_p   = false
        @has_body_p       = false
        @contradicted_p   = false
        @contradicted_by  = Set.new
    end
end

property_list = Hash.new
symbol_list.each do |x|
    property_list[x] = DeductionChain.new
end

puts "Doing Property List Stuff"

#Add information about finding source
callgraph2 = Hash.new
callgraph.each do |key,value|
    property_list[key].has_body_p = true
    if(!value.include? "nil")
        callgraph2[key] = value
    end
end
callgraph = callgraph2

#Add Anything That's On the function_props list
function_props.each do |key, value|
    if(property_list.include? key)
        if(value.include? 'realtime')
            property_list[key].realtime_p = true
            property_list[key].reason     = reason_code_w
        elsif(value.include? 'non-realtime')
            property_list[key].non_realtime_p = true
            property_list[key].reason         = reason_code_b
        end
    end
end

#Add WhiteList Information
property_list.each do |key, value|
    if(!value.realtime_p &&
       !value.non_realtime_p)
        if(white_list.include?(key) || white_list.include?(demangled_short[key]))
            value.realtime_p = true
            value.reason = reason_user_w
        end
    end
end

#Add BlackList Information
property_list.each do |key, value|
    if(!value.realtime_p &&
       !value.non_realtime_p)
        if(black_list.include?(key) || black_list.include?(demangled_short[key]))
            value.non_realtime_p = true
            value.reason = reason_user_b
        end
    end
end

#Add Any Known Virtual Calls
vtable_information.each do |key, value|
    value.each do |key2, value2|
        if(value2 != "(none)" && value2 != "__cxa_pure_virtual")
            new_key = "class.#{key}#{key2}"
            if(!callgraph.include? new_key)
                callgraph[new_key] = []
            end
            callgraph[new_key] << value2
            if(!property_list.include? new_key)
                property_list[new_key] = DeductionChain.new
                symbol_list << new_key
            end
            if(!property_list.include? value2)
                property_list[value2] = DeductionChain.new
                symbol_list << value2
            end
            property_list[new_key].has_body_p = true
        end
    end
end

#Add Calls Down the hierarchy [THIS IS BUGGED XXX]
class_high.each do |sub, supers|
    supers.each do |super_|
        50.times do |x|
            testing = "class.#{super_}#{x}"
            source = "class.#{sub}#{x}"
            if(symbol_list.include? testing)
                callgraph[testing] ||= []
                callgraph[testing] << source
                symbol_list << source
                if(!property_list.include? source)
                    property_list[source] = DeductionChain.new
                    property_list[source].has_body_p = true
                end
                property_list[testing].has_body_p = true
            end
        end
    end
end

#Add C++ABI Destructor/Constructor Chaining
symbol_list.each do |sym_|
    sym = sym_.to_s #TODO figure out how an integer got in this list
    if /D1Ev$/.match sym
        sym_mod = sym.gsub(/D1Ev$/, "D2Ev")
        if(symbol_list.include?(sym_mod) && !callgraph.include?(sym))
            callgraph[sym] = [sym_mod]
            property_list[sym].has_body_p = true
        end
    end
end

symbol_list.each do |sym_|
    sym = sym_.to_s
    if /C1E/.match sym
        sym_mod = sym.gsub(/C1E/, "C2E")
        if(symbol_list.include?(sym_mod) && !callgraph.include?(sym))
            callgraph[sym] = [sym_mod]
            property_list[sym].has_body_p = true
        end
    end
end



#Add no source stuff
property_list.each do |key, value|
    if(!value.has_body_p && !value.realtime_p && !value.non_realtime_p)
        value.non_realtime_p = true
        value.reason         = reason_nocode
    end
end

#Perform Deductions
do_stuff = true
while do_stuff
    do_stuff = false
    property_list.each do |key, value|
        if(!value.contradicted_p)
            if(value.realtime_p() && callgraph.include?(key))
                callgraph[key].each do |x|
                    if(property_list[x].non_realtime_p)
                        value.contradicted_p = true
                        value.contradicted_by << x
                        do_stuff = true
                    elsif(!property_list[x].realtime_p)
                        property_list[x].realtime_p = true
                        property_list[x].deduction_source = key
                        property_list[x].reason = reason_deduced
                        do_stuff = true
                    end
                end
            end
        end
    end
end



#Regenerate Demangled Symbols
demangled_symbols = Hash.new
demangled_short   = Hash.new
demangle(symbol_list, demangled_symbols, demangled_short)

error_count = 0
property_list.each do |key, value|
    if(value.contradicted_p)
        error_count = error_count+1
        pp demangled_symbols[key]
        pp value
        puts "##The Deduction Chain:"
        next_prop = value.deduction_source
        while(next_prop) do
            puts " - #{demangled_symbols[next_prop]} : #{property_list[next_prop].reason}"
            next_prop = property_list[next_prop].deduction_source
        end
        puts "##The Contradiction Reasons:"
        value.contradicted_by.each do |x|
            puts " - #{demangled_symbols[x]} : #{property_list[x].reason}"
        end
        puts "\n\n\n"
    end
end

puts "Total of #{error_count} error(s)"

require "graphviz"

def to_2hex(x)
    s = x.to_s 16
    if(s.length == 1)
        "0" + s
    else
        s
    end
end

def random_color
    r = (rand * 255 * 255).to_i % ("CE".to_i 16)
    g = (rand * 255 * 255).to_i % ("DD".to_i 16)
    b = (rand * 255 * 255).to_i % ("EC".to_i 16)
    "#" + ([r,g,b].map{|x| to_2hex(x)}.join)
end

g = GraphViz::new( "G" )
color_nodes = Hash.new
property_list.each do |key,val|
    if(val.contradicted_p)
        color_nodes[key] ||= "red"
        val.contradicted_by.each do |x|
            color_nodes[x] = "black"
        end
    elsif(val.realtime_p)
        color_nodes[key] ||= "green"
    end
end


node_list = Hash.new
color_nodes.each do |key,val|
    if(demangled_short.include?(key) && demangled_short[key] && demangled_short[key].length != 0)
        node_list[key] = g.add_node(demangled_short[key], "color"=> val)
    end
end

callgraph.each do |src, dests|
    dests.uniq.each do |dest|
        if(node_list.include?(src) && node_list.include?(dest))
            if(property_list[dest].non_realtime_p)
                g.add_edges(node_list[src], node_list[dest], "color"=>(random_color), "style"=>"bold")
            else
                g.add_edges(node_list[src], node_list[dest], "color"=>(random_color), "style"=>"dashed")
            end
        end
    end
end
g.output( :png => "sfpv_graphics.png" )
